use serde::{Deserialize, Serialize};
use std::default::Default;

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct FilterMeta {
    pub title: Option<String>,
    pub included_tags: Option<Vec<Tag>>,
    pub excluded_tags: Option<Vec<Tag>>,
    pub sort_ord: Option<Vec<OrderOptions>>,
    pub content_rating: Option<Vec<ContentRating>>,
    pub publication_demographic: Option<Vec<PublicationDemographic>>,
    pub status: Option<Vec<TitleStatus>>,
    pub original_language: Option<Vec<OriginalLanguage>>,
    pub available_translated_language: Option<Vec<AvailableTranslatedLanguage>>,
}

impl Default for FilterMeta {
    fn default() -> FilterMeta {
        FilterMeta {
            title: None,
            included_tags: None,
            excluded_tags: None,
            sort_ord: None,
            content_rating: None,
            publication_demographic: None,
            status: None,
            original_language: None,
            available_translated_language: None,
        }
    }
}

#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(rename_all = "snake_case")]
pub enum Tag {}

#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(rename_all = "snake_case")]
pub enum OrderOptions {}

#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(rename_all = "snake_case")]
pub enum ContentRating {}

#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(rename_all = "snake_case")]
pub enum PublicationDemographic {}

#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(rename_all = "snake_case")]
pub enum TitleStatus {}

#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(rename_all = "snake_case")]
pub enum OriginalLanguage {}

#[derive(Serialize, Deserialize, Debug, Clone)]
#[serde(rename_all = "snake_case")]
pub enum AvailableTranslatedLanguage {}

#[derive(Serialize, Deserialize)]
#[serde(rename_all = "snake_case")]
pub enum EntityType {
    Manga,
    CoverArt,
    Chapter,
    Author,
    ApiClient,
    ReportReason,
    ScanlationGroup,
    User,
}

#[derive(Serialize, Deserialize, Debug, Clone)]
pub struct LocalizedString {
    ab: Option<String>,
    aa: Option<String>,
    af: Option<String>,
    ak: Option<String>,
    sq: Option<String>,
    am: Option<String>,
    ar: Option<String>,
    an: Option<String>,
    hy: Option<String>,
    r#as: Option<String>,
    av: Option<String>,
    ae: Option<String>,
    ay: Option<String>,
    az: Option<String>,
    bm: Option<String>,
    ba: Option<String>,
    eu: Option<String>,
    be: Option<String>,
    bn: Option<String>,
    bi: Option<String>,
    bs: Option<String>,
    br: Option<String>,
    bg: Option<String>,
    my: Option<String>,
    ca: Option<String>,
    ch: Option<String>,
    ce: Option<String>,
    ny: Option<String>,
    zh: Option<String>,
    cu: Option<String>,
    cv: Option<String>,
    kw: Option<String>,
    co: Option<String>,
    cr: Option<String>,
    hr: Option<String>,
    cs: Option<String>,
    da: Option<String>,
    dv: Option<String>,
    dz: Option<String>,
    en: Option<String>,
    eo: Option<String>,
    et: Option<String>,
    ee: Option<String>,
    fo: Option<String>,
    fj: Option<String>,
    fr: Option<String>,
    fi: Option<String>,
    fy: Option<String>,
    ff: Option<String>,
    gd: Option<String>,
    gl: Option<String>,
    lg: Option<String>,
    ka: Option<String>,
    de: Option<String>,
    el: Option<String>,
    kl: Option<String>,
    gn: Option<String>,
    gu: Option<String>,
    ht: Option<String>,
    ha: Option<String>,
    he: Option<String>,
    hi: Option<String>,
    ho: Option<String>,
    is: Option<String>,
    io: Option<String>,
    ig: Option<String>,
    id: Option<String>,
    ia: Option<String>,
    ie: Option<String>,
    iu: Option<String>,
    ik: Option<String>,
    ga: Option<String>,
    it: Option<String>,
    ja: Option<String>,
    jv: Option<String>,
    kn: Option<String>,
    kr: Option<String>,
    ks: Option<String>,
    kk: Option<String>,
    km: Option<String>,
    ki: Option<String>,
    rw: Option<String>,
    ky: Option<String>,
    kv: Option<String>,
    kg: Option<String>,
    ko: Option<String>,
    kj: Option<String>,
    ku: Option<String>,
    lo: Option<String>,
    la: Option<String>,
    lv: Option<String>,
    li: Option<String>,
    ln: Option<String>,
    lt: Option<String>,
    lu: Option<String>,
    lb: Option<String>,
    mk: Option<String>,
    mg: Option<String>,
    ms: Option<String>,
    ml: Option<String>,
    mt: Option<String>,
    gv: Option<String>,
    mi: Option<String>,
    mr: Option<String>,
    mh: Option<String>,
    mn: Option<String>,
    na: Option<String>,
    nv: Option<String>,
    nd: Option<String>,
    nr: Option<String>,
    ng: Option<String>,
    ne: Option<String>,
    no: Option<String>,
    nb: Option<String>,
    nn: Option<String>,
    oc: Option<String>,
    oj: Option<String>,
    or: Option<String>,
    om: Option<String>,
    os: Option<String>,
    pi: Option<String>,
    ps: Option<String>,
    fa: Option<String>,
    pl: Option<String>,
    pt: Option<String>,
    pa: Option<String>,
    qu: Option<String>,
    ro: Option<String>,
    rm: Option<String>,
    rn: Option<String>,
    ru: Option<String>,
    se: Option<String>,
    sm: Option<String>,
    sg: Option<String>,
    sa: Option<String>,
    sc: Option<String>,
    sr: Option<String>,
    sn: Option<String>,
    sd: Option<String>,
    si: Option<String>,
    sk: Option<String>,
    sl: Option<String>,
    so: Option<String>,
    st: Option<String>,
    es: Option<String>,
    su: Option<String>,
    sw: Option<String>,
    ss: Option<String>,
    sv: Option<String>,
    tl: Option<String>,
    ty: Option<String>,
    tg: Option<String>,
    ta: Option<String>,
    tt: Option<String>,
    te: Option<String>,
    th: Option<String>,
    bo: Option<String>,
    ti: Option<String>,
    to: Option<String>,
    ts: Option<String>,
    tn: Option<String>,
    tr: Option<String>,
    tk: Option<String>,
    tw: Option<String>,
    ug: Option<String>,
    uk: Option<String>,
    ur: Option<String>,
    uz: Option<String>,
    ve: Option<String>,
    vi: Option<String>,
    vo: Option<String>,
    wa: Option<String>,
    cy: Option<String>,
    wo: Option<String>,
    xh: Option<String>,
    ii: Option<String>,
    yi: Option<String>,
    yo: Option<String>,
    za: Option<String>,
    zu: Option<String>,
    zh_hk: Option<String>,
    pt_br: Option<String>,
    es_la: Option<String>,
    ja_ro: Option<String>,
    ko_ro: Option<String>,
    zh_ro: Option<String>,
}

impl Default for LocalizedString {
    fn default() -> Self {
        LocalizedString {
            ab: None,
            aa: None,
            af: None,
            ak: None,
            sq: None,
            am: None,
            ar: None,
            an: None,
            hy: None,
            r#as: None,
            av: None,
            ae: None,
            ay: None,
            az: None,
            bm: None,
            ba: None,
            eu: None,
            be: None,
            bn: None,
            bi: None,
            bs: None,
            br: None,
            bg: None,
            my: None,
            ca: None,
            ch: None,
            ce: None,
            ny: None,
            zh: None,
            cu: None,
            cv: None,
            kw: None,
            co: None,
            cr: None,
            hr: None,
            cs: None,
            da: None,
            dv: None,
            dz: None,
            en: None,
            eo: None,
            et: None,
            ee: None,
            fo: None,
            fj: None,
            fr: None,
            fi: None,
            fy: None,
            ff: None,
            gd: None,
            gl: None,
            lg: None,
            ka: None,
            de: None,
            el: None,
            kl: None,
            gn: None,
            gu: None,
            ht: None,
            ha: None,
            he: None,
            hi: None,
            ho: None,
            is: None,
            io: None,
            ig: None,
            id: None,
            ia: None,
            ie: None,
            iu: None,
            ik: None,
            ga: None,
            it: None,
            ja: None,
            jv: None,
            kn: None,
            kr: None,
            ks: None,
            kk: None,
            km: None,
            ki: None,
            rw: None,
            ky: None,
            kv: None,
            kg: None,
            ko: None,
            kj: None,
            ku: None,
            lo: None,
            la: None,
            lv: None,
            li: None,
            ln: None,
            lt: None,
            lu: None,
            lb: None,
            mk: None,
            mg: None,
            ms: None,
            ml: None,
            mt: None,
            gv: None,
            mi: None,
            mr: None,
            mh: None,
            mn: None,
            na: None,
            nv: None,
            nd: None,
            nr: None,
            ng: None,
            ne: None,
            no: None,
            nb: None,
            nn: None,
            oc: None,
            oj: None,
            or: None,
            om: None,
            os: None,
            pi: None,
            ps: None,
            fa: None,
            pl: None,
            pt: None,
            pa: None,
            qu: None,
            ro: None,
            rm: None,
            rn: None,
            ru: None,
            se: None,
            sm: None,
            sg: None,
            sa: None,
            sc: None,
            sr: None,
            sn: None,
            sd: None,
            si: None,
            sk: None,
            sl: None,
            so: None,
            st: None,
            es: None,
            su: None,
            sw: None,
            ss: None,
            sv: None,
            tl: None,
            ty: None,
            tg: None,
            ta: None,
            tt: None,
            te: None,
            th: None,
            bo: None,
            ti: None,
            to: None,
            ts: None,
            tn: None,
            tr: None,
            tk: None,
            tw: None,
            ug: None,
            uk: None,
            ur: None,
            uz: None,
            ve: None,
            vi: None,
            vo: None,
            wa: None,
            cy: None,
            wo: None,
            xh: None,
            ii: None,
            yi: None,
            yo: None,
            za: None,
            zu: None,
            zh_hk: None,
            pt_br: None,
            es_la: None,
            ja_ro: None,
            ko_ro: None,
            zh_ro: None,
        }
    }
}

#[derive(Serialize, Deserialize)]
pub struct MangaSearchResponseDataItem {
    id: String,
    #[serde(rename(deserialize = "type"))]
    entity_type: EntityType,
}

#[cfg(test)]
mod tests {
    use super::*;

    #[test]
    fn test() {
        println!("{}", size_of::<LocalizedString>());
    }
}
